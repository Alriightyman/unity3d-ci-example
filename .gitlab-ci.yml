image: "gableroux/unity3d:latest"

stages:
  - test
  - build
  - deploy

.unity_before_script: &unity_before_script
  before_script:
    - mkdir -p /root/.cache/unity3d
    - mkdir -p /root/.local/share/unity3d/Unity/
    - echo "$UNITY_LICENSE_CONTENT" > /root/.local/share/unity3d/Unity/Unity_lic.ulf

.test: &test
  stage: test
  <<: *unity_before_script
  script: |
    /opt/Unity/Editor/Unity \
      -projectPath $(pwd) \
      -quit \
      -batchmode \
      -force-free \
      -nographics \
      -runTests \
      -logFile \
      -testResults $(pwd)/$TEST_PLATFORM-results.xml \
      -testPlatform $TEST_PLATFORM
  artifacts:
    paths:
      - ./$TEST_PLATFORM-results.xml

test-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode

test-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode

.build: &build
  stage: build
  <<: *unity_before_script
  script: |
    echo "Building for $BUILD_TARGET"
    mkdir -p ./Builds/$BUILD_TARGET
    xvfb-run --server-args="-screen 0 1024x768x24" \
      /opt/Unity/Editor/Unity \
      -projectPath $(pwd) \
      -quit \
      -batchmode \
      -buildTarget $BUILD_TARGET \
      -customBuildTarget $BUILD_TARGET \
      -customBuildPath "./Builds/$BUILD_TARGET" \
      -customBuildOptions AcceptExternalModificationsToPlayer \
      -executeMethod BuildCommand.PerformBuild \
      -logFile
  artifacts:
    paths:
      - ./Builds/
#   only:
#     - master

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64

build-StandaloneOSXUniversal:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneOSXUniversal

build-StandaloneWindows64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneWindows64

build-WebGL:
  <<: *build
  variables:
    BUILD_TARGET: WebGL

pages:
  image: alpine:latest
  stage: deploy
  script:
    - mv ./Builds/WebGL public
  artifacts:
    paths:
    - public
  only:
    - master

